from firebase.firebase_config import db
from asian_parlimentary.model.asian_parlimentart import AsianParliamentary
from rag.debate_controller import DebateController

class AsianParliamentaryService:
    def __init__(self,topic:str):
        self.firebase = db
        self.asian_parliamentary = AsianParliamentary(topic=topic)
        self.debate_controller = DebateController()

    def create_session(self):
        # Create a new document reference with auto-generated ID
        doc_ref = self.firebase.collection("debate_sessions").document()
        # Get the ID
        doc_id = doc_ref.id
        # Update the model with the ID
        data = self.asian_parliamentary.model_dump()
        data['id'] = doc_id

        # Generate initial AI speech (PM speech)
        pm_speaker = self.asian_parliamentary.speakers[0]
        if pm_speaker.is_ai:
            # Generate AI speech for PM
            ai_speech = self.debate_controller.generate_ai_speech(
                self.asian_parliamentary.topic, 
                pm_speaker.role
            )

            # Add the speech to the speeches list
            speech_data = {
                "speaker": pm_speaker.name,
                "content": ai_speech,
                "is_ai": True
            }
            data['speeches'].append(speech_data)

            # Update debate state
            data['debate_state'] = "in_progress"
            data['current_speaker_index'] = 1  # Move to next speaker (LO)

            # Store the speech in the vector store for context
            self.debate_controller.add_speech(ai_speech, pm_speaker.name)

        # Set the document data
        doc_ref.set(data)
        return doc_id

    def get_session(self, session_id):
        debate = self.firebase.collection("debate_sessions").document(session_id).get()
        return debate.to_dict()

    def update_session(self, session_id, update_data):
        self.firebase.collection("debate_sessions").document(session_id).update(update_data)
        return session_id

    def add_speech(self, session_id, speaker_name, content, is_ai=False):
        """
        Add a speech to the debate session and update the debate state.

        Args:
            session_id: The ID of the debate session
            speaker_name: The name of the speaker
            content: The content of the speech
            is_ai: Whether the speech was generated by AI

        Returns:
            The updated session ID
        """
        # Get the current session
        session = self.get_session(session_id)
        if not session:
            return None

        # Add the speech to the speeches list
        speech_data = {
            "speaker": speaker_name,
            "content": content,
            "is_ai": is_ai
        }

        # Update the session
        speeches = session.get('speeches', [])
        speeches.append(speech_data)

        # Determine the next speaker
        current_index = session.get('current_speaker_index', 0)
        next_index = (current_index + 1) % len(session.get('speakers', []))

        update_data = {
            'speeches': speeches,
            'current_speaker_index': next_index,
            'debate_state': 'in_progress'
        }

        # Store the speech in the vector store for context
        self.debate_controller.add_speech(content, speaker_name)

        # Update the session in the database
        return self.update_session(session_id, update_data)
